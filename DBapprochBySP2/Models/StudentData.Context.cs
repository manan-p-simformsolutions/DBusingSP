//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBapprochBySP2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentBySPEntities : DbContext
    {
        public StudentBySPEntities()
            : base("name=StudentBySPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Student> Students { get; set; }
    
        public virtual int DelteStudent(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelteStudent", studentIdParameter);
        }
    
        public virtual int InsertStudent(Nullable<int> studentId, string name, Nullable<int> rollNo, Nullable<int> standard, string city)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rollNoParameter = rollNo.HasValue ?
                new ObjectParameter("RollNo", rollNo) :
                new ObjectParameter("RollNo", typeof(int));
    
            var standardParameter = standard.HasValue ?
                new ObjectParameter("Standard", standard) :
                new ObjectParameter("Standard", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudent", studentIdParameter, nameParameter, rollNoParameter, standardParameter, cityParameter);
        }
    
        public virtual ObjectResult<SelectStudents_Result> SelectStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectStudents_Result>("SelectStudents");
        }
    
        public virtual int UpdateStudent(Nullable<int> studentId, string name, Nullable<int> rollNo, Nullable<int> standard, string city)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rollNoParameter = rollNo.HasValue ?
                new ObjectParameter("RollNo", rollNo) :
                new ObjectParameter("RollNo", typeof(int));
    
            var standardParameter = standard.HasValue ?
                new ObjectParameter("Standard", standard) :
                new ObjectParameter("Standard", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudent", studentIdParameter, nameParameter, rollNoParameter, standardParameter, cityParameter);
        }
    
        public virtual ObjectResult<FindStudent_Result> FindStudent(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindStudent_Result>("FindStudent", studentIdParameter);
        }
    
        public virtual ObjectResult<sp_pagination_Result> sp_pagination(Nullable<long> id, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pagination_Result>("sp_pagination", idParameter, pageNumberParameter, pageSizeParameter);
        }
    }
}
